import pandas as pd
import numpy as np
import lightgbm as lgb
from ta.momentum import RSIIndicator
from ta.trend import EMAIndicator
from stable_baselines3 import PPO
import gym
from gym import spaces
import ccxt
from ta.trend import MACD
from ta.volatility import BollingerBands
import ta
import os
from lightgbm import LGBMClassifier, LGBMRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import sys
import streamlit as st
import time
from linebot.v3.messaging import MessagingApi, Configuration, ApiClient
from linebot.v3.messaging.models import TextMessage, PushMessageRequest, ImageMessage
sys.stdout.reconfigure(encoding='utf-8')

user_id = 'U9713684916c46794109094dc4c180a08'  # ÊõøÊèõÊàêÊÇ®ÁöÑ User ID
config = Configuration(
    access_token='GwwVLTOUtUrelOSZZgmA6Zv2JMbFOafVVSOfMw7WeKZloPTxFx1xa3CndCqnrjdIKBUZw8FnbGZuZAU3nxaI2ouAUJpRMxXv8wBRdnmrECfuRvMNH1oO/MolAWgFdGMaL6PLTT7SvZxm815y3RgznAdB04t89/1O/w1cDnyilFU=')
messaging_api = MessagingApi(ApiClient(configuration=config))

# Streamlit User Interface
st.set_page_config(
    page_title="üìà Crypto Trading Signal Display", layout="centered")
st.title("Crypto Trading Signal Display")

# Create a placeholder for dynamic updates
placeholder = st.empty()

while True:

    exchange = ccxt.kucoin()
    ohlcv = exchange.fetch_ohlcv('BTC/USDT', timeframe='1m', limit=100)

    df = pd.DataFrame(
        ohlcv, columns=['Timestamp', 'Open', 'High', 'Low', 'Close', 'Volume'])

    df['Timestamp'] = pd.to_datetime(df['Timestamp'], unit='ms')

    df['Volume_Change'] = df['Volume'].pct_change()
    df['Candle_Body'] = abs(df['Close'] - df['Open'])
    df['Range'] = df['High'] - df['Low']
    df['Return'] = df['Close'].pct_change()

    df['RSI'] = RSIIndicator(close=df['Close'].squeeze(), window=14).rsi()
    df['EMA_fast'] = df['Close'].ewm(span=5).mean()
    df['EMA_slow'] = df['Close'].ewm(span=20).mean()
    df['BollingerBands'] = ta.volatility.BollingerBands(
        df['Close'].squeeze()).bollinger_lband()
    df['ADX'] = ta.trend.ADXIndicator(
        df['High'].squeeze(), df['Low'].squeeze(), df['Close'].squeeze()).adx()
    df['OBV'] = ta.volume.OnBalanceVolumeIndicator(
        df['Close'].squeeze(), df['Volume'].squeeze()).on_balance_volume()

    # ---------- STEP 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á Label ----------

    def compute_trend_direction_and_duration(df, sideway_thresh=0.001, max_lookahead=20):
        result = []
        for i in range(len(df)):
            direction = None
            duration = 0
            for j in range(1, max_lookahead + 1):
                if i + j >= len(df):
                    break
                ret = (df['Close'].iloc[i + j] - df['Close'].iloc[i]) / \
                    df['Close'].iloc[i]
                if abs(ret) < sideway_thresh:
                    if direction is None:
                        direction = "sideway"
                    elif direction != "sideway":
                        break
                elif ret > 0:
                    if direction is None:
                        direction = "up"
                    elif direction != "up":
                        break
                elif ret < 0:
                    if direction is None:
                        direction = "down"
                    elif direction != "down":
                        break
                duration += 1
            result.append((direction, duration))
        df['TrendDir'], df['TrendLen'] = zip(*result)
        return df

    df = compute_trend_direction_and_duration(df)
    df.dropna(inplace=True)

    # ---------- STEP 4: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞ Target ----------

    df['TrendDirEncoded'] = LabelEncoder().fit_transform(
        df['TrendDir'])  # up=2, sideway=1, down=0

    features = [
        'Open', 'High', 'Low', 'Close', 'Volume',
        'RSI', 'EMA_fast', 'EMA_slow',
        'BollingerBands', 'ADX', 'OBV',
        'Volume_Change', 'Candle_Body', 'Range', 'Return'
    ]

    X = df[features]
    y_dir = df['TrendDirEncoded']
    y_len = df['TrendLen']

    # ---------- STEP 5: Train Models ----------

    X_train, X_test, y_dir_train, y_dir_test = train_test_split(
        X, y_dir, test_size=0.2, random_state=42)
    _, _, y_len_train, y_len_test = train_test_split(
        X, y_len, test_size=0.2, random_state=42)

    model_dir = LGBMClassifier()
    model_dir.fit(X_train, y_dir_train)

    model_len = LGBMRegressor()
    model_len.fit(X_train, y_len_train)

    # === STEP 6: ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ===
    latest = X.iloc[[-1]]
    dir_pred = model_dir.predict(latest)[0]
    proba = model_dir.predict_proba(latest)[0][dir_pred]
    len_pred = int(model_len.predict(latest)[0])
    dir_label = ['down', 'sideway', 'up'][dir_pred]
    adx_val = df['ADX'].iloc[-1]

    # === STEP 7: ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ó‡∏£‡∏î‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ===

    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    try:
        position
    except NameError:
        position = None
        entry_price = 0

    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏™‡∏°‡∏°‡∏ï‡∏¥ df ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß)
    price_now = df['Close'].iloc[-1]

    if dir_label in ['up', 'down'] and len_pred >= 5 and proba > 0.85 and adx_val > 25:
        # ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤ position ‡πÉ‡∏´‡∏°‡πà
        if position is None:
            if dir_label == 'up':
                action = f"üìà ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: *‡πÄ‡∏£‡∏¥‡πà‡∏° Long* (~{len_pred} ‡πÅ‡∏ó‡πà‡∏á)"
            else:
                action = f"üìâ ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: *‡πÄ‡∏£‡∏¥‡πà‡∏° Short* (~{len_pred} ‡πÅ‡∏ó‡πà‡∏á)"
            position = dir_label
            entry_price = price_now
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πâ‡∏Å‡∏£‡∏ì‡∏µ‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        elif position == dir_label:
            action = f"‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå {dir_label.upper()} ‡∏ï‡πà‡∏≠ (~{len_pred} ‡πÅ‡∏ó‡πà‡∏á)"
        # ‡∏™‡∏•‡∏±‡∏ö‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå (‡∏à‡∏≤‡∏Å‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°)
        else:
            if position == 'up':
                pnl = (price_now - entry_price) / entry_price * 100
            else:
                pnl = (entry_price - price_now) / entry_price * 100
            action = f"üîÅ ‡∏õ‡∏¥‡∏î {position.upper()} ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£ {round(pnl, 2)}% ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏° {dir_label.upper()} ‡πÉ‡∏´‡∏°‡πà"
            entry_price = price_now
            position = dir_label

    # ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° sideway
    elif dir_label == 'sideway':
        if position is not None:
            action = f"‚ö† ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° Sideway ‚Üí *‡∏ñ‡∏∑‡∏≠ {position.upper()} ‡∏ï‡πà‡∏≠* ‡∏£‡∏≠‡∏î‡∏π‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÉ‡∏´‡∏°‡πà"
        else:
            action = f"‚è∏ Sideway ~{len_pred} ‡πÅ‡∏ó‡πà‡∏á ‚Üí ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏ó‡∏£‡∏î"

    # ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    else:
        if position is not None:
            # ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏≤‡∏Å trend ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏•‡∏î
            if adx_val < 25 or proba < 0.6:
                if position == 'up':
                    pnl = (price_now - entry_price) / entry_price * 100
                else:
                    pnl = (entry_price - price_now) / entry_price * 100
                action = f"üõë ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏≠‡πà‡∏≠‡∏ô ‚Üí ‡∏õ‡∏¥‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ {position.upper()} ‡∏ó‡∏µ‡πà {round(pnl, 2)}%"
                position = None
                entry_price = 0
            else:
                action = f"üîÑ ‡∏ñ‡∏∑‡∏≠ {position.upper()} ‡∏ï‡πà‡∏≠ ‡∏£‡∏≠‡∏à‡∏∏‡∏î‡∏≠‡∏≠‡∏Å"
        else:
            action = "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"

    # print(
    #     f"üîÆ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: {dir_label.upper()} ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {len_pred} ‡πÅ‡∏ó‡πà‡∏á")
    # print(f"üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {round(proba*100, 2)}% | ADX: {round(adx_val, 2)}")
    # print(f"üéØ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {action}")
    # print("=========================================")

    # Update the placeholder with the latest action
    placeholder.markdown(
        f"üîÆ **‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:** {dir_label.upper()} ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {len_pred} ‡πÅ‡∏ó‡πà‡∏á")
    placeholder.markdown(
        f"üß† **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à:** {round(proba*100, 2)}% | ADX: {round(adx_val, 2)}")
    placeholder.markdown(f"üéØ **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** {action}")
    placeholder.markdown("=========================================")

    # Âª∫Á´ãÊñáÂ≠óË®äÊÅØ TextMessage
    full_message = f"üîÆ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: {dir_label.upper()} ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {len_pred} ‡πÅ‡∏ó‡πà‡∏á \nüß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {round(proba*100, 2)}% | ADX: {round(adx_val, 2)}\nüéØ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {action}"
    text_message = TextMessage(text=full_message)
    push_message_request = PushMessageRequest(
        to=user_id, messages=[text_message])

    # ÂÇ≥ÈÄÅË®äÊÅØ
    messaging_api.push_message(push_message_request=push_message_request)
    time.sleep(30)  # ‡∏£‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
